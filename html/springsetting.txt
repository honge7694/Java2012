open jdk 11
eclipse 2020-12
tomcat 9
Spring Tools 3 (Standalone Edition) 3.9.14
oracle 11g(ojdbc8.jar)
lombok.jar(1.18.16)


1. java 버전, spring 버전 수정(aspectj 와 ,slf4 버전은 나중에 수정)

	<properties>
		<java-version>1.11</java-version> // 이거랑 오후 3:50 2021-01-11
		<org.springframework-version>5.2.0.RELEASE</org.springframework-version> // 이거만 바꿈 오후 3:50 2021-01-11
		<org.aspectj-version>1.9.0</org.aspectj-version>
		<org.slf4j-version>1.7.25</org.slf4j-version>
	</properties>


            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>2.5.1</version>
                <configuration>
                    <source>1.11</source>
                    <target>1.11</target>
                    <compilerArgument>-Xlint:all</compilerArgument>
                    <showWarnings>true</showWarnings>
                    <showDeprecation>true</showDeprecation>
                </configuration>
            </plugin>

2. Lombok 라이브러리 설치(eclipse 에 모두 반영) lombok은 코드 작성 기능.
    https://projectlombok.org 에서 다운로드
    cmd -> cd c:\ -> cd javaweb(집은다를수있음) -> 밑에
    version 1.18.16
    >java -jar lombok.jar
    -> 그리고 스프링이랑 관련된 eclipse로 연동.

3. spring-test, lombok 추가
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>${org.springframework-version}</version>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>1.18.16</version>
			<scope>provided</scope>
		</dependency>


4. log4j 수정(기존 log4j 주석처리)
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.17</version>
		</dependency>

5. junit 버전 변경
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
			<scope>test</scope>
		</dependency>

6. window -> preferences -> java -> editor -> Save actions 수정

7.  src/main/java 에 com.koreait.sample 패키지 생성하고 Chef 클래스 생성 후 애너테이션 테스트

@Component
@Data
public class Chef {

	@Setter(onMethod_ = @Autowired)
	private Chef chef;
}

8. root-context.xml 의 Namespaces에서 context 항목 체크 및 소스코드 추가

	<context:component-scan base-package="com.koreait.sample">
	</context:component-scan>

9. src/test/java 아래에 com.koreait.sample 패키지 생성 후 SampleTest.java 생성

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration("file:src/main/webapp/WEB-INF/spring/root-context.xml")
@Log4j
public class SampleTest {
	
	@Test
	public void testSample() {
		log.info("test...............................");
	}

}
    
10. 프로젝트 속성의 Java Build Path 에 ojdbc8.jar 를 추가 -- oracle 전용

11. Deployment Assembly 에 ojdbc8.jar 추가 -- oracle 전용

11-1 lombok 뒤에 추가. -- mysql 전용
	<!-- mysql jdbc -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>8.0.22</version>
		</dependency>
12. src/test/java 에 com.koreait.persistence 패키지를 추가하고 JDBCTest.java 파일 작성 -- oracle 전용(수정해서 mysql에 사용)

<!-- oracle -->
@Log4j
public class JDBCTest {
	
	//@Test
	public void testConn() {
		try {
			Class.forName("oracle.jdbc.driver.OracleDriver");
			Connection conn = DriverManager.getConnection("jdbc:oracle:thin:@192.168.0.25:1521:orcl",
					"st3",
					"1234");
			log.info(conn);
		} catch (Exception e) {
			System.out.println(e.toString());
		}
	}
}

<!-- mysql -->
@Log4j
public class JDBCTest {
	
	//@Test
	public void testConn() {
		try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/javadb?serverTimezone=Asia/Seoul",
					"java",
					"1234");
			log.info(conn);
		} catch (Exception e) {
			System.out.println(e.toString());
		}
	}
}
13. HikariCP 추가 -- oracle 전용

		<dependency>
			<groupId>com.zaxxer</groupId>
			<artifactId>HikariCP</artifactId>
			<version>3.4.5</version>
		</dependency>

14. root-context.xml 에 HikariCP 설정 -- oracle 전용

	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"></property>
		<property name="jdbcUrl" value="jdbc:oracle:thin:@192.168.0.25:1521:orcl"></property>
		<property name="username" value="st3"></property>
		<property name="password" value="1234"></property>
	</bean>
	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" 
		destroy-method="close">
		<constructor-arg ref="hikariConfig" />
	</bean>

15. src/test/java 아래의 com.it.persistence 패키지에 DataSourceTest.java 생성 // 안되면 16번 17번 진행 후

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration("file:src/main/webapp/WEB-INF/spring/root-context.xml")
@Log4j
public class DataSourceTest {

	@Setter(onMethod_ = {@Autowired})
	private DataSource dataSource;
	
	//@Test
	public void testConn() {
		try {
			Connection conn = dataSource.getConnection();
			log.info(conn);
		} catch (Exception e) {
			System.out.println(e.toString());
		}
	}
	
}

16. mybatis 설정 추가 및 root-context.xml 
		<!-- pom.xml -->

		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis</artifactId>
			<version>3.4.6</version>
		</dependency>
		
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis-spring</artifactId>
			<version>1.3.2</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-tx</artifactId>
			<version>${org.springframework-version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>${org.springframework-version}</version>
		</dependency>
		
17. root-context.xml 의  source 에 sqlSessionFactory 추가 후 Namespace jdbc와 mybatis 체크
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="com.mysql.cj.jdbc.Driver"></property>
		<property name="url" value="jdbc:mysql://localhost:3306/javadb?serverTimezone=Asia/Seoul" ></property>
		<property name="username" value="java"></property>
		<property name="password" value="1234"></property>
	</bean>

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
18. DataSourceTest 에 다음을 추가하고 테스트
	
	// DataSource 밑에 추가.
	@Setter(onMethod_ = @Autowired) 
	private SqlSessionFactory sqlSessionFactory;
	
	// testConn 밑에 추가.
	//@Test
	public void testMybatis() {
		try {
			SqlSession session = sqlSessionFactory.openSession();
			Connection conn = session.getConnection();
			log.info("session : " + conn);
		} catch (Exception e) {
			System.out.println(e.toString());
		}
	}


19. src/main/java 에 com.it.mapper 패키지 생성하고 TimeMapper 인터페이스 생성

// DB와 최초로 만나는 패키지. mapper
public interface TimeMapper { 

	public String getTime();
}

20. root-context.xml 의 namespace 항목에서 mybatis-spring 체크하고 다음을 추가

	<mybatis-spring:scan base-package="com.koreait.mapper" />

21. src/main/resources 아래에 com -> koreait -> mapper 폴더 생성하고 TimeMapper.xml 생성
<!-- 19번에서 생성한 인터페이스 이름과 똑같아야함. -->

<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.koreait.mapper.TimeMapper">
	<select id="getTime" resultType="string">
		select sysdate <!-- ; 세미콜론 찍으면 안된다. -->
	</select>
</mapper>

22. src/test/java 의 com.koreait.persistence 패키지에 TimeMapperTest.java 생성

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration("file:src/main/webapp/WEB-INF/spring/root-context.xml")
@Log4j
public class TimeMapperTest {
	@Setter(onMethod_ = @Autowired)
	private TimeMapper timeMapper;
	
	//@Test
	public void testGetTiem() {
		log.info("timemapper : " + timeMapper.getTime());
		log.info("................................");
	}

}

22-2 DB만들기 및 값 넣기

CREATE TABLE tblboard (
	b_num INT NOT NULL AUTO_INCREMENT,
    b_subject VARCHAR(200) NOT NULL,
    b_contents VARCHAR(2000) NOT NULL,
    b_name VARCHAR(100) NOT NULL,
    b_passwd VARCHAR(100) NOT NULL,
    b_wdate DATETIME NOT NULL DEFAULT now(),
    b_udate DATETIME NOT NULL DEFAULT now(),
    primary key(b_num) 
);

INSERT INTO tblboard (b_subject, b_contents, b_name, b_passwd) VALUES ('안녕하세요', '안녕하세요 내용', '홍길동', '1234');

22-3 com.koreait.domain 만든후 클래스 BoardVO 생성.

@Data // Get과 Set을 자동으로 만들어줌.
public class BoardVO { // VO = Value Object
	private int b_num;
	private String b_subject;
	private String b_contents;
	private String b_name;
	private String b_passwd;
	private Date b_wdate;
	private Date b_udate;
}

22-4 com.koreait.mapper 패키지에 BoardMapper.java 생성

public interface BoardMapper {
	public List<BoardVO> getList();
}

22-5 src/main/resources폴더 -> com -> koreait -> mapper폴더에 BoardMapper.xml 생성

<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.koreait.mapper.BoardMapper">
	<select id="getList" resultType="com.koreait.domain.BoardVO">
		SELECT * FROM tblboard order by b_num desc
	</select>
</mapper>

22-6 src/test/java 에 com.koreait.mapper 패키지 생성 후 BoardMapperTest.java 생성하여 22~22-5 까지 한거 잘실행되는지확인

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration("file:src/main/webapp/WEB-INF/spring/root-context.xml")
@Log4j
public class BoardMapperTest {
	
	@Setter(onMethod_ = @Autowired) // 의존성 주입.
	private BoardMapper mapper;
	
	@Test
	public void testGetList() {
		mapper.getList().forEach(board -> log.info(board));
	}
}

22-7 src/main/java에 com.koreait.service 패키지 생성 및 BoardService 인터페이스 생성

public interface BoardService {
	public List<BoardVO> getList();
}

22-8 BoardServiceImpl.java 클래스 생성

@Log4j
@Service
//@AllArgsConstructor // @Setter 2줄 대신 쓸 수 있음. 가급적으로 Setter를 쓰는게 좋음.
public class BoardServiceImpl implements BoardService{
	
	@Setter(onMethod_ = @Autowired)
	private BoardMapper mapper;
	
	@Override
	public List<BoardVO> getList() {
		log.info("Service 리스트........................");
		return mapper.getList();
	}
	
}

22-8 root-context.xml에 추가

 <context:component-scan base-package="com.koreait.service" />

22-9 22-7~8까지 만든 것을 확인하기위해 src/test/java 에 com.koreait.controller 생성

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration("file:src/main/webapp/WEB-INF/spring/root-context.xml")
@Log4j
public class BoardServiceTest {
	
	@Setter(onMethod_=@Autowired)
	private BoardService service;
	
	@Test
	public void testGetList() {
		log.info("Service에서 리스트함..........................");
		service.getList().forEach(board -> log.info(service));
	}
	
	
}


23. pom 에 log4jdbc-log4j2 설정

		<dependency>
			<groupId>org.bgee.log4jdbc-log4j2</groupId>
			<artifactId>log4jdbc-log4j2-jdbc4</artifactId>
			<version>1.16</version>
		</dependency>

24. src/main/resources 에 log4jdbc.log4j2.properties 파일 생성하고 다음 내용 작성

log4jdbc.spylogdelegator.name=net.sf.log4jdbc.log.slf4j.Slf4jSpyLogDelegator

25. root-context.xml 파일 일부 수정

	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
		<!-- 
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"></property>
		<property name="jdbcUrl" value="jdbc:oracle:thin:@192.168.0.25:1521:orcl"></property>
		 -->
		<property name="driverClassName" value="net.sf.log4jdbc.sql.jdbcapi.DriverSpy"></property>
		<property name="jdbcUrl" value="jdbc:log4jdbc:oracle:thin:@192.168.0.25:1521:orcl"></property>
		<property name="username" value="st3"></property>
		<property name="password" value="1234"></property>
	</bean>

26. src/main/resources 의 log4j.xml 파일에 에러가 있을 경우 다음과 같이 수정

<!-- 
<!DOCTYPE log4j:configuration PUBLIC "-//APACHE//DTD LOG4J 1.2//EN" "log4j.dtd">
-->
<!DOCTYPE log4j:configuration SYSTEM "http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/xml/doc-files/log4j.dtd">


27. pom 의 서블릿 버전 수정

		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>3.1.0</version>
		</dependency>

28. Jackson-databind 추가
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>2.9.6</version>
		</dependency>

29. 파일 업로드 추가

		<dependency>
			<groupId>commons-fileupload</groupId>
			<artifactId>commons-fileupload</artifactId>
			<version>1.3.3</version>
		</dependency>

30. src/main/java 에 com.it.service 패키지 추가

31. root-context.xml 의 네임스페이스에 context 항목 체크 하고 다음 내용 추가

<context:component-scan base-package="com.it.service" />

32. 데이터베이스에 입력시 한글 깨짐 방지 위해 web.xml 수정

	<filter>
		<filter-name>encoding</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encoding</filter-name>
		<servlet-name>appServlet</servlet-name>
	</filter-mapping>

33. REST API 설정

		<dependency>
			<groupId>com.fasterxml.jackson.dataformat</groupId>
			<artifactId>jackson-dataformat-xml</artifactId>
			<version>2.9.6</version>
		</dependency>
 		
		<dependency>
			<groupId>com.google.code.gson</groupId>
			<artifactId>gson</artifactId>
			<version>2.8.2</version>
		</dependency>

34. pom 의 AOP 버전 수정

	<properties>
		<java-version>1.11</java-version>
		<org.springframework-version>5.2.0.RELEASE</org.springframework-version>
		<org.aspectj-version>1.9.0</org.aspectj-version>
		<org.slf4j-version>1.7.25</org.slf4j-version>
	</properties>


35. pom 에 aspectj 추가
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjweaver</artifactId>
			<version>${org.aspectj-version}</version>
		</dependency>	
		
36. 트랜잭션을 위해 root-context.xml 의 네임스페이스에 aop 항목과 tx 항목 체크하고 다음 내용 추가

	<tx:annotation-driven />

	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>

37. pom.xml 에 다음의 내용을 추가
		<!-- spring security -->
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-web</artifactId>
			<version>${org.springframework-version}</version>
		</dependency>
		
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-config</artifactId>
			<version>${org.springframework-version}</version>
		</dependency>
		
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-core</artifactId>
			<version>${org.springframework-version}</version>
		</dependency>
		
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-taglibs</artifactId>
			<version>${org.springframework-version}</version>
		</dependency>

38.  src/main/webapp/WEB-INF/spring 폴더에 Spring Bean Configuration File 생성
	파일명을 security-context.xml 로 생성
	namespace 에서 security 항목 체크하고 spring-security.xsd 체크 

39. web.xml 에 다음의 내용을 추가

	<filter>
		<filter-name>springSecurityFilterChain</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>springSecurityFilterChain</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

40. web.xml 에 다음의 내용을 수정

	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			/WEB-INF/spring/root-context.xml
			/WEB-INF/spring/security-context.xml
		</param-value>
	</context-param>

41. security-context.xml 파일에 다음의 내용을 추가

	<bean id="bcryptPasswordEncoder"
		class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
	<security:http>
		<security:form-login/>
	</security:http>
	
	<security:authentication-manager>
		<security:authentication-provider>
			<security:jdbc-user-service data-source-ref="dataSource"/>
			<security:password-encoder ref="bcryptPasswordEncoder" />
		</security:authentication-provider>
	</security:authentication-manager>

37. pom.xml

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.it</groupId>
	<artifactId>controller</artifactId>
	<name>myweb</name>
	<packaging>war</packaging>
	<version>1.0.0-BUILD-SNAPSHOT</version>
	<properties>
		<java-version>1.11</java-version>
		<org.springframework-version>5.2.0.RELEASE</org.springframework-version>
		<org.aspectj-version>1.9.0</org.aspectj-version>
		<org.slf4j-version>1.7.25</org.slf4j-version>
	</properties>
	<dependencies>
		<!-- Spring -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${org.springframework-version}</version>
			<exclusions>
				<!-- Exclude Commons Logging in favor of SLF4j -->
				<exclusion>
					<groupId>commons-logging</groupId>
					<artifactId>commons-logging</artifactId>
				 </exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${org.springframework-version}</version>
		</dependency>
				
		<!-- AspectJ -->
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjrt</artifactId>
			<version>${org.aspectj-version}</version>
		</dependency>
		
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjweaver</artifactId>
			<version>${org.aspectj-version}</version>
		</dependency>	
		
		
		<!-- Logging -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${org.slf4j-version}</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
			<version>${org.slf4j-version}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>${org.slf4j-version}</version>
			<scope>runtime</scope>
		</dependency>
		
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>${org.springframework-version}</version>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>1.18.0</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.17</version>
		</dependency>
		
		<!-- Hikari Config -->
		<dependency>
			<groupId>com.zaxxer</groupId>
			<artifactId>HikariCP</artifactId>
			<version>3.4.5</version>
		</dependency>
		
		<!-- Mybatis config -->
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis</artifactId>
			<version>3.4.6</version>
		</dependency>
		
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis-spring</artifactId>
			<version>1.3.2</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-tx</artifactId>
			<version>${org.springframework-version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>${org.springframework-version}</version>
		</dependency>
		
		<dependency>
			<groupId>org.bgee.log4jdbc-log4j2</groupId>
			<artifactId>log4jdbc-log4j2-jdbc4</artifactId>
			<version>1.16</version>
		</dependency>
		
		<!-- Jackson-databind -->
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>2.9.6</version>
		</dependency>
		
		<dependency>
			<groupId>com.fasterxml.jackson.dataformat</groupId>
			<artifactId>jackson-dataformat-xml</artifactId>
			<version>2.9.6</version>
		</dependency>

 		
		<dependency>
			<groupId>com.google.code.gson</groupId>
			<artifactId>gson</artifactId>
			<version>2.8.2</version>
		</dependency>
		
		<dependency>
			<groupId>commons-fileupload</groupId>
			<artifactId>commons-fileupload</artifactId>
			<version>1.3.3</version>
		</dependency>
		
		<!-- 
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.15</version>
			<exclusions>
				<exclusion>
					<groupId>javax.mail</groupId>
					<artifactId>mail</artifactId>
				</exclusion>
				<exclusion>
					<groupId>javax.jms</groupId>
					<artifactId>jms</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.sun.jdmk</groupId>
					<artifactId>jmxtools</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.sun.jmx</groupId>
					<artifactId>jmxri</artifactId>
				</exclusion>
			</exclusions>
			<scope>runtime</scope>
		</dependency>
		 -->
		<!-- @Inject -->
		<dependency>
			<groupId>javax.inject</groupId>
			<artifactId>javax.inject</artifactId>
			<version>1</version>
		</dependency>
				
		<!-- Servlet -->
		<!--
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId>
			<version>2.5</version>
			<scope>provided</scope>
		</dependency>
		-->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>3.1.0</version>
		</dependency>
		
		<dependency>
			<groupId>javax.servlet.jsp</groupId>
			<artifactId>jsp-api</artifactId>
			<version>2.1</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
		</dependency>
	
		<!-- Test -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
			<scope>test</scope>
		</dependency>        
	</dependencies>
    <build>
        <plugins>
            <plugin>
                <artifactId>maven-eclipse-plugin</artifactId>
                <version>2.9</version>
                <configuration>
                    <additionalProjectnatures>
                        <projectnature>org.springframework.ide.eclipse.core.springnature</projectnature>
                    </additionalProjectnatures>
                    <additionalBuildcommands>
                        <buildcommand>org.springframework.ide.eclipse.core.springbuilder</buildcommand>
                    </additionalBuildcommands>
                    <downloadSources>true</downloadSources>
                    <downloadJavadocs>true</downloadJavadocs>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>2.5.1</version>
                <configuration>
                    <source>1.11</source>
                    <target>1.11</target>
                    <compilerArgument>-Xlint:all</compilerArgument>
                    <showWarnings>true</showWarnings>
                    <showDeprecation>true</showDeprecation>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>1.2.1</version>
                <configuration>
                    <mainClass>org.test.int1.Main</mainClass>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>


38. root-context.xml

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->

	<context:component-scan base-package="com.it.sample">
	</context:component-scan>		
	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
		<!-- 
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"></property>
		<property name="jdbcUrl" value="jdbc:oracle:thin:@192.168.0.25:1521:orcl"></property>
		 -->
		<property name="driverClassName" value="net.sf.log4jdbc.sql.jdbcapi.DriverSpy"></property>
		<property name="jdbcUrl" value="jdbc:log4jdbc:oracle:thin:@192.168.0.25:1521:orcl"></property>
		<property name="username" value="st3"></property>
		<property name="password" value="1234"></property>
	</bean>
	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" 
		destroy-method="close">
		<constructor-arg ref="hikariConfig" />
	</bean>
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<tx:annotation-driven />
	<mybatis-spring:scan base-package="com.it.mapper" />
	<context:component-scan base-package="com.it.service" />
	
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
	
</beans>

39. servlet-context.xml

<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="com.it.controller" />
	
	
	
</beans:beans>


40. web.xml

<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee https://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">

	<!-- The definition of the Root Spring Container shared by all Servlets and Filters -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/spring/root-context.xml</param-value>
	</context-param>
	
	<!-- Creates the Spring Container shared by all Servlets and Filters -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!-- Processes application requests -->
	<servlet>
		<servlet-name>appServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/spring/appServlet/servlet-context.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
		
	<servlet-mapping>
		<servlet-name>appServlet</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	
	<filter>
		<filter-name>encoding</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encoding</filter-name>
		<servlet-name>appServlet</servlet-name>
	</filter-mapping>

</web-app>

41. log4j.xml

<?xml version="1.0" encoding="UTF-8"?>
<!-- 
<!DOCTYPE log4j:configuration PUBLIC "-//APACHE//DTD LOG4J 1.2//EN" "log4j.dtd">
-->
<!DOCTYPE log4j:configuration SYSTEM "http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/xml/doc-files/log4j.dtd">
<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">

	<!-- Appenders -->
	<appender name="console" class="org.apache.log4j.ConsoleAppender">
		<param name="Target" value="System.out" />
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="%-5p: %c - %m%n" />
		</layout>
	</appender>
	
	<!-- Application Loggers -->
	<logger name="com.it.controller">
		<level value="info" />
	</logger>
	
	<!-- 3rdparty Loggers -->
	<logger name="org.springframework.core">
		<level value="info" />
	</logger>
	
	<logger name="org.springframework.beans">
		<level value="info" />
	</logger>
	
	<logger name="org.springframework.context">
		<level value="info" />
	</logger>

	<logger name="org.springframework.web">
		<level value="info" />
	</logger>

	<!-- Root Logger -->
	<root>
		<priority value="warn" />
		<appender-ref ref="console" />
	</root>
	

</log4j:configuration>

42. log4jdbc.log4j2.properties

log4jdbc.spylogdelegator.name=net.sf.log4jdbc.log.slf4j.Slf4jSpyLogDelegator

43. TimeMapper.xml

<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.it.mapper.TimeMapper">
	<select id="getTime" resultType="string">
		select sysdate from dual
	</select>
</mapper>


45. MemberTest.java

package com.it.security;

import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import com.it.domain.MemberVO;
import com.it.mapper.MemberMapper;

import lombok.Setter;
import lombok.extern.log4j.Log4j;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration({"file:src/main/webapp/WEB-INF/spring/root-context.xml",
	"file:src/main/webapp/WEB-INF/spring/security-context.xml"
})
@Log4j
public class MemberTest {
	
	@Setter(onMethod_ = @Autowired)
	private PasswordEncoder pwencoder;
	
	@Setter(onMethod_ = @Autowired)
	private MemberMapper mapper;
	
	//@Test
	public void testInsertMember() {
		MemberVO member = new MemberVO();
		member.setM_id("kim");
		member.setM_name("홍길동");
		member.setM_passwd(pwencoder.encode("1234"));
		log.info("Insert : " + member);
		mapper.insert(member);
		
	}
	
	//@Test
	public void testMatch() {
		MemberVO member = new MemberVO();
		member.setM_id("kim");
		
		member = mapper.selectmember(member);
		log.info(member + "==================================");
		if (pwencoder.matches("1234", member.getM_passwd())) {
			log.info("test OK");
		} else {
			log.info("test FAIL");
		}
	}

}


alter table membertbl add(m_passwd varchar(50));
alter table membertbl modify (m_passwd varchar(100));


